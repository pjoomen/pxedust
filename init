#!/bin/busybox sh
#
# Sets up the rootfs, mounts required pseudo filesystems and calls
# /bin/switch_root on the new root.
#
# This version allows us to boot from an externally maintained rootfs,
# which is loaded from a given URL, and install this rootfs either on a
# tmpfs (RAM) or on a KVM (/dev/vda) block-device.
#
# Note that this also provisions a serial console upstart script if a
# serial console is passed on the kernel commandline.
#
# Author: Pip Oomen <pepijn@redpill-linpro.com>

# install busybox applets
/bin/busybox --install -s /bin

# make procfs available
[ -d /proc ] || mkdir /proc
mount -t proc -o nodev,noexec,nosuid none /proc

# make kernel level ip nameresolving available
[ -d /etc ] || mkdir /etc
ln -sfn /proc/net/pnp /etc/resolv.conf

if (grep -q break=top /proc/cmdline); then
  echo "honoring break=top kernel arg"
  /bin/busybox sh
fi

# prepare the root, either /dev/vda or tmpfs
mkdir /newroot
if (grep -q todisk= /proc/cmdline); then
  TODISK=$(sed -n -e 's/.* \?todisk=\([^ ]*\)\? \?.*/\1/p' /proc/cmdline)
  mknod /dev/vda b 253 0
  [ -z "$(findfs LABEL=${TODISK})" ] && mke2fs -L ${TODISK} /dev/vda
  mount -t ext4 -o noatime /dev/vda /newroot
else
  MEMSIZE=$(sed -n -e 's/.* \?size=\([^ ]*\)\? \?.*/\1/p' /proc/cmdline)
  mount -t tmpfs -o size=${MEMSIZE:-4G},mode=0755 none /newroot
fi

if (grep -q break=preunpack /proc/cmdline); then
  echo "honoring break=preunpack kernel arg"
  /bin/sh
fi

# install the rootfs, if it isn't available already
cd /newroot
if [ ! -f sbin/init ]; then
  if [ -f /rootfs.tgz ]; then
    echo unpacking rootfs...
    tar zxf /rootfs.tgz
  else
    ROOTFS=$(sed -n -e 's/.* \?rootfs=\([^ ]*\)\? \?.*/\1/p' /proc/cmdline)
    echo downloading and unpacking rootfs...
    wget -qO - ${ROOTFS} | tar zx
    # get firstboot, if specified
    FIRSTBOOT=$(sed -n -e 's/.* \?firstboot=\([^ ]*\)\? \?.*/\1/p' /proc/cmdline)
    [ -n "${FIRSTBOOT}" ] && wget -qO - ${FIRSTBOOT} > /newroot/usr/local/sbin/firstboot
  fi
fi

# disable network configuration of eth0
sed -i -e 's/^auto eth0/# auto eth0/' /newroot/etc/network/interfaces

# mount sysfs and devtmpfs (udev)
mount -n -t sysfs -o nodev,noexec,nosuid none /newroot/sys
mount -n -t devtmpfs none /newroot/dev

# miscellaneous pseudo filesystemes
[ -d /newroot/dev/pts ] || mkdir /newroot/dev/pts
mount -n -t devpts none /newroot/dev/pts
[ -d /newroot/dev/shm ] || mkdir /newroot/dev/shm
mount -n -t tmpfs none /newroot/dev/shm

# setup the serial console
CONSOLE=$(sed -n -e 's/.* \?console=\(ttyS[0-9]\)\(,\([0-9]\+\)\)\?.*/\1 \3/p' /proc/cmdline)
SPEED=${CONSOLE#* *}
SERIAL=${CONSOLE%* *}
if [ -n "${SERIAL}" -a ! -f etc/init/serial.conf ]; then
  echo enabling serial console...
  cat <<-EOS > etc/init/${SERIAL}.conf
start on stopped rc RUNLEVEL=[2345]
stop on runlevel [!2345]
respawn
exec /sbin/getty -8 ${SPEED:-115200} ${SERIAL}
EOS
fi

# move virtual filesystems over to the real filesystem
mount -n -o move /proc /newroot/proc

if (grep -q break=bottom /newroot/proc/cmdline); then
  echo "honoring break=bottom kernel arg"
  /bin/sh
fi

echo running /sbin/init...
exec switch_root -c /dev/console /newroot /sbin/init
